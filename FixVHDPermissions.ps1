#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: b3a3eacd-b909-49ae-89a3-edd6eb20bb1b
# Source File: FixVHDPermissions.psproj
#------------------------------------------------------------------------
#region Project Recovery Data (DO NOT MODIFY)
<#RecoveryData:
VQIAAB+LCAAAAAAABACFUkFPwyAYvZvsPzQcTbq2mzE2Mg5mqe6gLuuyq4H2m0UpNJTOzV8vlM5s
UePlgwcf7/Ee4BUUagf6MKeGktFFEOClVm9QmCA/yKLSSvJPKGcoo6IF1C9mXBjQM3Q5btrk1tXa
D6Ufkn0t+sm2r62tfqUC0YzN3qBeyEptQLdcSTIZJzg6gmHPqsBiTtiUToEWZcjSOA2vUgrhTUqn
IZTlNbBJzFjCcDQ0D0cHB+tDAyTG0Sk8kitRWrkgOlVrBzDA4K7jwjqPEckN1aZrnBmv9VdnkFdU
u7jWurNprWALGmQBWScLY83N0ELu1DuE90IxKl5sWIj4eeuS+4f9F768Uh/hI+UyU7q2fFtEjsi9
wBmhB97mdywePWv+yiUVruGJ1kAyvt88zJega966Z3HXa+wJHP1oHV3g6OwbfQGSLSZrVQIAAA==#>
#endregion
<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2018 v5.5.155
     Generated on:       11/13/2018 9:43 AM
     Generated by:       Jordan Colton
     Organization:       InterMountain ESD
    --------------------------------------------------------------------------------
    .DESCRIPTION
        Script generated by PowerShell Studio 2018
#>



#region Source: Startup.pss
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
6wMAAB+LCAAAAAAABAC9k0trg0AQx++FfgfJWdRlXU1AhdCQS+mDWtJeRx1l6T7C7prgt69NS1Jo
SUsOMpd5MPPjz8xkT1jrHZphBQ680bFcq3xGAzIrrq88L3swvOMKxJoLvAeJRenAuH4bbK3Nwh/V
Q8/SWpSV4GgP8SkzFOVgHUrf23yR4iD6MN+76YXrDeYKe2dA+N5jP06ob3F41m+o8ipNgdUsIQsa
YzRfZOFx5u+M4A4UdChRuWDZOy3BjcATmfyXTEnV0jlLoKFJjJT9TX7hqtF7G6y1kXYSrSsDe666
S1gRbVmbtoQ0LAIKZ1jS1toIXk2jaLzHSUCvUkwjiBusnTZDiWbHa7zoMM4v6xh+fl4Wfn/u4h27
t81y6wMAAA==#>
#endregion
#----------------------------------------------
#region Import Assemblies
#----------------------------------------------
[void][Reflection.Assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
[void][Reflection.Assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
#endregion Import Assemblies

#Define a Param block to use custom parameters in the project
#Param ($CustomParameter)

function Main {
<#
    .SYNOPSIS
        The Main function starts the project application.
    
    .PARAMETER Commandline
        $Commandline contains the complete argument string passed to the script packager executable.
    
    .NOTES
        Use this function to initialize your script and to call GUI forms.
		
    .NOTES
        To get the console output in the Packager (Forms Engine) use: 
		$ConsoleOutput (Type: System.Collections.ArrayList)
#>
	Param ([String]$Commandline)
		
	#--------------------------------------------------------------------------
	#TODO: Add initialization script here (Load modules and check requirements)
	
	
	#--------------------------------------------------------------------------
	
	if((Show-MainForm_psf) -eq 'OK')
	{
		
	}
	
	$script:ExitCode = 0 #Set the exit code for the Packager
}







#endregion Source: Startup.pss

#region Source: Globals.ps1
	#--------------------------------------------
	# Declare Global Variables and Functions here
	#--------------------------------------------
	
	Import-Module Hyper-V
	
	#Sample function that provides the location of the script
	function Get-ScriptDirectory
	{
	<#
		.SYNOPSIS
			Get-ScriptDirectory returns the proper location of the script.
	
		.OUTPUTS
			System.String
		
		.NOTES
			Returns the correct path within a packaged executable.
	#>
		[OutputType([string])]
		param ()
		if ($null -ne $hostinvocation)
		{
			Split-Path $hostinvocation.MyCommand.path
		}
		else
		{
			Split-Path $script:MyInvocation.MyCommand.Path
		}
	}
	
	#Sample variable that provides the location of the script
	[string]$ScriptDirectory = Get-ScriptDirectory
	
	
	
#endregion Source: Globals.ps1

#region Source: MainForm.psf
function Show-MainForm_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
AggAAB+LCAAAAAAABAC9VcmOo0gQvVvyP5T66lYBxoCRqktK9sVsZjU3lgRjVrPZ+OvbVT3qGc0c
RhqNKvOSkZEZL0L58sXbESbtDPuFi8bo5bkYirb58Q1/xb69r1cvL29GX+RFE1VCUUE9quG7FhWN
0Pb1azdkb8g/3J+XPvzvZa7lWAx5k5EBYA2OBb8GAzjdF7F5ewEWciE6ZC+pZxxjUYGBRR7K5zju
PSaXRX3Cl7Keei+Tji3l3AKKXq8eeYNyqbzzyfJ6ZDnVDKCZnZCZOhwlvEBuaerQG1m00qbjaLFl
JB+SxcXmiSOtMaaCexzpqOUyK/GhX6/cU6NZrqcVJTlmItgoqWpOp52XAof3KwHKk3na7Rck1z0N
bw8t1NC6z2bsPA5kr0mMmwznvD2dNlb/zK2JpQox7yXHdmWZ8ZGR2MjJuVuFZJJunVcQWuWoSDtf
KwX1gEXG47LNvEsbXBdMYIZ4VHog2Bw8U364XlX3CzqdHkAOfb3f96Ifxg9fmzrnUScDw/DLFY9V
RsJRZkdWgN/hjpYcC7J+3EvZ9D2EFwB97Tx59CR9vWLCWqNVS7V4HCu60YpBw7CRngQTZM+4o1jt
IyjRgXfPBGO2ttJ2zAwlnzQwIy0I7Hqdj6djeXuUG7BZr5wza2BCAuRzQuWkZxCtnrumUmC6RqWH
ReRsS9emM6zrbLRrlc5hNHdAwnKDptWAd0KrTZZkkTS8TJ65cYZCGVlzWLYNZ/A13y0d5CZ8u2MZ
Wqwj6QDVsnFHWf3gVPXkVB5OJZYo4pMVDSHO0b4Aij1UgVs8X0GxotraKFVriXlWMdk52CPFEiz3
cDOXmVVteLbbZ5eTcjcAX7bKdfcI+zS1U6/sF/wihFmBj36lnXbNk2+B/DwBG3JgeT+ZL3IkCyGQ
URHUm6GKx2lotwl/vTI7l8ekQujVgI4mWrGpAXoX6UD0LU0JOuPGHbNeedfA7K3Q2+CPWa7HjE0X
MgqhwNcVR0WiIIi6B41gTjmhcd07gY4phR2Q0V4IT5+JO7c3xrO0oSC6m9ercpuZ9XihvBkEqEnH
UOxjg6yDc3gRcXUAIw6PMMLamcaa5t5pHaJjI5fmaDijpkzcHZBEQrFE5zzz1iuxyMi5eWxQjLx6
NZhTd4P5Bt1jPj50qSwwM5/vmW1TIWka6Sfpzh+oEEpZzQTHcpMDbn9z0mb7yFInXq/uV7cZQcXb
+qW7FKR6jUxP13AvLBBqUk/VjdJ8W9ddXR2iNKRv4uPjv6EOd4RZnNV7aHuUPBqNjtTqeiXZKPBJ
goh8sMxSVsmNcD9DkVWUJaajA6/xV2wPHrfYZM1jPxMiHiCgxmTQ83s+B+AN+ZSkT3ECwwDruCrg
8Gn/ubO810PS9lURf3/x/lDC3Sv6Mb+/sFM1Tj380cBp7KPq+4s5PWMkKlyctoTNj5iiIiIhSIzG
dxDd02/I76h/R7GXYYT1V2C8+kWTtrfh9aP64UsQP/rI1wD10a1o8v+CheIZkVEZhqUEGuHRv2MF
dfUlNbFtD/9/oN/mL8q/IX/t+e8/AZNIwgYCCAAA#>
#endregion
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formFixVHDPermissions = New-Object 'System.Windows.Forms.Form'
	$labelSelectVMToAddToVHDVH = New-Object 'System.Windows.Forms.Label'
	$textboxVHD = New-Object 'System.Windows.Forms.TextBox'
	$buttonFixPermissions = New-Object 'System.Windows.Forms.Button'
	$buttonGetVHD = New-Object 'System.Windows.Forms.Button'
	$listboxVMs = New-Object 'System.Windows.Forms.ListBox'
	$buttonClose = New-Object 'System.Windows.Forms.Button'
	$openfiledialog1 = New-Object 'System.Windows.Forms.OpenFileDialog'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	$formFixVHDPermissions_Load={
		#TODO: Initialize Form Controls here
		Import-Module Hyper-V
		$VMs = Get-VM
		foreach ($VM in $VMs)
		{
			$VMName = $VM.Name
			Update-ListBox $listboxVMs -items $VMName -Append
		}
	}
	
	#region Control Helper Functions
	function Update-ListBox
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ListBox or CheckedListBox.
		
		.DESCRIPTION
			Use this function to dynamically load items into the ListBox control.
		
		.PARAMETER ListBox
			The ListBox control you want to add items to.
		
		.PARAMETER Items
			The object or objects you wish to load into the ListBox's Items collection.
		
		.PARAMETER DisplayMember
			Indicates the property to display for the items in this control.
		
		.PARAMETER Append
			Adds the item(s) to the ListBox without clearing the Items collection.
		
		.EXAMPLE
			Update-ListBox $ListBox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Update-ListBox $listBox1 "Red" -Append
			Update-ListBox $listBox1 "White" -Append
			Update-ListBox $listBox1 "Blue" -Append
		
		.EXAMPLE
			Update-ListBox $listBox1 (Get-Process) "ProcessName"
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ListBox]
			$ListBox,
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]
			$DisplayMember,
			[switch]
			$Append
		)
		
		if (-not $Append)
		{
			$listBox.Items.Clear()
		}
		
		if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection] -or $Items -is [System.Collections.ICollection])
		{
			$listBox.Items.AddRange($Items)
		}
		elseif ($Items -is [System.Collections.IEnumerable])
		{
			$listBox.BeginUpdate()
			foreach ($obj in $Items)
			{
				$listBox.Items.Add($obj)
			}
			$listBox.EndUpdate()
		}
		else
		{
			$listBox.Items.Add($Items)
		}
		
		$listBox.DisplayMember = $DisplayMember
	}
	#endregion
	
	$buttonGetVHD_Click={
		$openfiledialog1.Filter = 'VHD/VHDX Files (*.vhd, *.vhdx)| *.vhd;*.vhdx'
		$openfiledialog1.ShowDialog()
		if (($openfiledialog1.FileName -ne "" -and $openfiledialog1.FileName -ne $null) -and ($listboxVMs.SelectedItem -ne "" -and $listboxVMs.SelectedItem -ne $null))
		{
			$buttonFixPermissions.Enabled = $true
		}
		$textboxVHD.Text = $openfiledialog1.FileName
		
	}
	
	$buttonFixPermissions_Click = {
		[String]$FileName = $openfiledialog1.FileName
		
		$SelectedVMName = $listboxVMs.SelectedItem
		$SelectedVM = Get-VM -Name $SelectedVMName
		$SelectedVMID = $SelectedVM.ID
		
		$FileACL = Get-Acl $FileName
		$FileACL.SetAccessRuleProtection($false, $true)
		$ACL = New-Object System.Security.AccessControl.FileSystemAccessRule("NT VIRTUAL MACHINE\$SelectedVMID", "Write, Read", "None, None", "None", "Allow")
		$FileACL.AddAccessRule($ACL)
		Set-Acl -Path $FileName -AclObject $FileACL
		
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show("Added access rule for`n`nVirtual Machine:`n$SelectedVMName`n$SelectedVMID`n`nOn Object:`n$FileName", 'Finished!') # Casting the method to [void] suppresses the output. 
	}
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formFixVHDPermissions.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:MainForm_textboxVHD = $textboxVHD.Text
		$script:MainForm_listboxVMs = $listboxVMs.SelectedItems
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonFixPermissions.remove_Click($buttonFixPermissions_Click)
			$buttonGetVHD.remove_Click($buttonGetVHD_Click)
			$formFixVHDPermissions.remove_Load($formFixVHDPermissions_Load)
			$formFixVHDPermissions.remove_Load($Form_StateCorrection_Load)
			$formFixVHDPermissions.remove_Closing($Form_StoreValues_Closing)
			$formFixVHDPermissions.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formFixVHDPermissions.SuspendLayout()
	#
	# formFixVHDPermissions
	#
	$formFixVHDPermissions.Controls.Add($labelSelectVMToAddToVHDVH)
	$formFixVHDPermissions.Controls.Add($textboxVHD)
	$formFixVHDPermissions.Controls.Add($buttonFixPermissions)
	$formFixVHDPermissions.Controls.Add($buttonGetVHD)
	$formFixVHDPermissions.Controls.Add($listboxVMs)
	$formFixVHDPermissions.Controls.Add($buttonClose)
	$formFixVHDPermissions.AcceptButton = $buttonClose
	$formFixVHDPermissions.AutoScaleDimensions = '6, 13'
	$formFixVHDPermissions.AutoScaleMode = 'Font'
	$formFixVHDPermissions.ClientSize = '284, 262'
	$formFixVHDPermissions.FormBorderStyle = 'FixedDialog'
	$formFixVHDPermissions.MaximizeBox = $False
	$formFixVHDPermissions.MinimizeBox = $False
	$formFixVHDPermissions.Name = 'formFixVHDPermissions'
	$formFixVHDPermissions.StartPosition = 'CenterScreen'
	$formFixVHDPermissions.Text = 'Fix VHD Permissions'
	$formFixVHDPermissions.add_Load($formFixVHDPermissions_Load)
	#
	# labelSelectVMToAddToVHDVH
	#
	$labelSelectVMToAddToVHDVH.AutoSize = $True
	$labelSelectVMToAddToVHDVH.Location = '12, 21'
	$labelSelectVMToAddToVHDVH.Name = 'labelSelectVMToAddToVHDVH'
	$labelSelectVMToAddToVHDVH.Size = '174, 17'
	$labelSelectVMToAddToVHDVH.TabIndex = 7
	$labelSelectVMToAddToVHDVH.Text = 'Select VM to add to VHD/VHDX...'
	$labelSelectVMToAddToVHDVH.UseCompatibleTextRendering = $True
	#
	# textboxVHD
	#
	$textboxVHD.Location = '12, 174'
	$textboxVHD.Name = 'textboxVHD'
	$textboxVHD.ReadOnly = $True
	$textboxVHD.Size = '260, 20'
	$textboxVHD.TabIndex = 6
	#
	# buttonFixPermissions
	#
	$buttonFixPermissions.Enabled = $False
	$buttonFixPermissions.Location = '12, 224'
	$buttonFixPermissions.Name = 'buttonFixPermissions'
	$buttonFixPermissions.Size = '115, 26'
	$buttonFixPermissions.TabIndex = 4
	$buttonFixPermissions.Text = 'Fix Permissions'
	$buttonFixPermissions.UseCompatibleTextRendering = $True
	$buttonFixPermissions.UseVisualStyleBackColor = $True
	$buttonFixPermissions.add_Click($buttonFixPermissions_Click)
	#
	# buttonGetVHD
	#
	$buttonGetVHD.Location = '12, 142'
	$buttonGetVHD.Name = 'buttonGetVHD'
	$buttonGetVHD.Size = '115, 26'
	$buttonGetVHD.TabIndex = 3
	$buttonGetVHD.Text = 'Select VHD/VHDX...'
	$buttonGetVHD.UseCompatibleTextRendering = $True
	$buttonGetVHD.UseVisualStyleBackColor = $True
	$buttonGetVHD.add_Click($buttonGetVHD_Click)
	#
	# listboxVMs
	#
	$listboxVMs.FormattingEnabled = $True
	$listboxVMs.Location = '12, 41'
	$listboxVMs.Name = 'listboxVMs'
	$listboxVMs.Size = '260, 95'
	$listboxVMs.Sorted = $True
	$listboxVMs.TabIndex = 2
	#
	# buttonClose
	#
	$buttonClose.Anchor = 'Bottom, Right'
	$buttonClose.DialogResult = 'OK'
	$buttonClose.Location = '197, 227'
	$buttonClose.Name = 'buttonClose'
	$buttonClose.Size = '75, 23'
	$buttonClose.TabIndex = 5
	$buttonClose.Text = '&Close'
	$buttonClose.UseCompatibleTextRendering = $True
	$buttonClose.UseVisualStyleBackColor = $True
	#
	# openfiledialog1
	#
	$openfiledialog1.FileName = 'openfiledialog1'
	$formFixVHDPermissions.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formFixVHDPermissions.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formFixVHDPermissions.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formFixVHDPermissions.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formFixVHDPermissions.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formFixVHDPermissions.ShowDialog()

}
#endregion Source: MainForm.psf

#Start the application
Main ($CommandLine)
